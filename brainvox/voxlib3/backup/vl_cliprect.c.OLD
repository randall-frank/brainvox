#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "voxel.h"

/* local prototypes */
long int vl_Clipt(double denom, double num, double *tE, double *tL);
long int InBounds(long int vx,long int vy,long int Xmin, long int Ymin,
	long int Xmax, long int Ymax);
long int base_clip(long int *vid, long int Dx,long int Dy, long int nloops,
	long int Xmin, long int Ymin, long int Xmax, long int Ymax,
	long int *out_t);

long int vl_clipline(long int *vid,long int *vidd,long int nloops,
	long int Xmin, long int Ymin, long int Xmax, long int Ymax,
	long int *out)
{
	long int	j,xp,yp;

/* step one, use Liang-Barsky for find "close" values */
	j =base_clip(vid,vidd[0]*(nloops-1),vidd[1]*(nloops-1),nloops,
		Xmin,Ymin,Xmax,Ymax,out);
	if (j == 0) return(0); 

/* now it is touchup time */
/* first for tE */
	if (out[0] != 0) {
		j = out[0];
		xp = vid[0]+vidd[0]*j;
		yp = vid[1]+vidd[1]*j;
		if (InBounds(xp,yp,Xmin,Ymin,Xmax,Ymax)) {
			xp -= vidd[0];
			yp -= vidd[1];
			while ((j > 1) && 
				(InBounds(xp,yp,Xmin,Ymin,Xmax,Ymax))) {
				j -= 1;
				xp -= vidd[0];
				yp -= vidd[1];
			}
		} else {
			xp += vidd[0];
			yp += vidd[1];
			while ((j < nloops-2) && 
				(!InBounds(xp,yp,Xmin,Ymin,Xmax,Ymax))) {
				j += 1;
				xp += vidd[0];
				yp += vidd[1];
			}
		}
		out[0] = j;
	}
/* last for tL */
	if (out[1] != (nloops-1)) {
		j = out[1];
		xp = vid[0]+vidd[0]*j;
		yp = vid[1]+vidd[1]*j;
		if (!InBounds(xp,yp,Xmin,Ymin,Xmax,Ymax)) {
			xp -= vidd[0];
			yp -= vidd[1];
			while ((j > 1) && 
				(!InBounds(xp,yp,Xmin,Ymin,Xmax,Ymax))) {
				j -= 1;
				xp -= vidd[0];
				yp -= vidd[1];
			}
		} else {
			xp += vidd[0];
			yp += vidd[1];
			while ((j < nloops-2) && 
				(InBounds(xp,yp,Xmin,Ymin,Xmax,Ymax))) {
				j += 1;
				xp += vidd[0];
				yp += vidd[1];
			}
		}
		out[1] = j;
	}
	return(1);
}

/*--------------------------------------------------------------------------*/
/*  Clip line to upright rectangle using Liang-Barsky parametric algorithm  */
/*--------------------------------------------------------------------------*/
long int InBounds(long int vx,long int vy,long int Xmin, long int Ymin,
	long int Xmax, long int Ymax)
{
	if ((vx>>16) < (Xmin>>16)) return(0);
	if ((vx>>16) > (Xmax>>16)) return(0);
	if ((vy>>16) < (Ymin>>16)) return(0);
	if ((vy>>16) > (Ymax>>16)) return(0);
	return(1);
}

long int base_clip(long int *vid, long int Dx,long int Dy, long int nloops,
	long int Xmin, long int Ymin, long int Xmax, long int Ymax,
	long int *out_t)
{
	register	double	dx = Dx,dy = Dy;
	register	double	x0 = (vid[0]);
	register	double  y0 = (vid[1]);
	double		xmin = Xmin,ymin = Ymin;
	double		xmax = Xmax,ymax = Ymax;
	double		tE = 0,tL = 1;
	long int 	visible;
	 			
	visible = 0;
	
	if ((dx == 0) && (dy == 0) && 
		InBounds(vid[0],vid[1],Xmin,Ymin,Xmax,Ymax)) {
	
		visible = 1;
		
	}  else  {
	
		if (vl_Clipt(dx,xmin - x0,&tE,&tL))  {	
		
			if (vl_Clipt(-dx,x0 - xmax,&tE,&tL))  {
						
				if (vl_Clipt(dy,ymin - y0,&tE,&tL))  {	
							
					if (vl_Clipt(-dy,y0 - ymax,&tE,&tL))  {
					
						visible = 1;
						
					}
					
				}
				
			}
			
		}
					
	}	

	out_t[0] = tE*(double)(nloops-1);
	out_t[1] = tL*(double)(nloops-1);

	return visible;
}

long int vl_Clipt(double denom, double num, double *tE, double *tL)
{
	double		t;
	long int	accept;
	
	accept = 1;
	
	if (denom > 0)  {
	
		t=num/denom;
		
		if (t > *tL)  {
		
			accept = 0;
			
		}
		
		else if (t > *tE)  {
		
			*tE = t;
			
		}
		
	}
	
	else if (denom < 0)  {
	
		t=num/denom;
		
		if (t < *tE)  {
		
			accept = 0;
			
		}
		
		else if (t < *tL)  {
		
			*tL = t;
			
		}
		
	}
	
	else  {
	
		if (num > 0)  {
		
			accept = 0;
		
		}
		
	}
	
	return accept;	
}

static void get_vert(long int face,long int n,vset *set,double *v);
static void scan_tri(double *v1,double *v2,double *v3,long int *lne,vset *set);
static void cmp_swap(double *v1,double *v2);

static void  cmp_swap(double *v1,double *v2)
{
        double   temp;
	long int i;

/* if Y1 > Y2 or (Y1=Y2 and X1>X2) then swap */
        if ((v1[1] > v2[1]) ||
                ((v1[1] == v2[1])
                && (v1[0] > v2[0]))) {
		
		for(i=0;i<2;i++) {
                	temp = v1[i];
                	v1[i] = v2[i];
                	v2[i] = temp;
		}
        }
}

#define INTERP_V(a,b,per)  ((a)+(((b)-(a))*(per)))

static void scan_tri(double *v1,double *v2,double *v3,long int *lne,vset *set)
{
	double		p1[2],p2[2],p3[2];
	long int	i,dx1,dx2;
	long int	y,yt,yb,ym;
	double		d1,d2,inc1,inc2;

/* buffer and order the points */	
	for(i=0;i<2;i++) {
		p1[i] = v1[i];
		p2[i] = v2[i];
		p3[i] = v3[i];
	}
	cmp_swap(p1,p2);
	cmp_swap(p2,p3);
	cmp_swap(p1,p2);

#ifdef DEBUG
	printf("%lf %lf\n",p1[0],p1[1]);
	printf("%lf %lf\n",p2[0],p2[1]);
	printf("%lf %lf\n",p3[0],p3[1]);
#endif

/* get scan values */
	yt = p1[1];
	ym = p2[1];
	yb = p3[1];
	d1 = fabs(p1[1] - p2[1]);
	d2 = fabs(p1[1] - p3[1]);
	inc1 = 0;
	inc2 = 0;
/* scan from p1[1] to p2[1] */
	for(y=yt;y<ym;y++) {
/* interpolate along the lines */
		dx1 = INTERP_V(p1[0],p2[0],(inc1/d1));
		dx2 = INTERP_V(p1[0],p3[0],(inc2/d2));
		if ((y >= 0) && (y < set->imagey)) lne[y] += abs(dx1-dx2);
/* move along */
		inc1 += 1.0;
		inc2 += 1.0;
	}

/* scan from p2[1] to p3[1] */
	d1 = fabs(p2[1] - p3[1]);
	inc1 = 0;
	for(y=ym;y<yb;y++) {
/* interpolate along the lines */
		dx1 = INTERP_V(p2[0],p3[0],(inc1/d1));
		dx2 = INTERP_V(p1[0],p3[0],(inc2/d2));
		if ((y >= 0) && (y < set->imagey)) lne[y] += abs(dx1-dx2);
/* move along */
		inc1 += 1.0;
		inc2 += 1.0;
	}

	return;
}

/*

verts:          ^Z+
	      6-|----7
	  Y+\ |\|    |\
             \| 4------5
              2-|----3 |
               \|     \|
                0------1 --->X+

faces:0=x+ 1=x- 2=y+ 3=y- 4=z+ 5=z-

*/
static void get_vert(long int face,long int n,vset *set,double *v)
{
	long int	vtab[6][4] = {
				{1,3,7,5},{4,6,2,0},
				{6,7,3,2},{0,1,5,4},
				{4,5,7,6},{2,3,1,0} };

	v[3] = 1;

	switch (vtab[face][n]) {
		case 0:
			v[0] = set->start[0];
			v[1] = set->start[1];
			v[2] = set->start[2];
			break;
		case 1:
			v[0] = set->end[0];
			v[1] = set->start[1];
			v[2] = set->start[2];
			break;
		case 2:
			v[0] = set->start[0];
			v[1] = set->end[1];
			v[2] = set->start[2];
			break;
		case 3:
			v[0] = set->end[0];
			v[1] = set->end[1];
			v[2] = set->start[2];
			break;
		case 4:
			v[0] = set->start[0];
			v[1] = set->start[1];
			v[2] = set->end[2];
			break;
		case 5:
			v[0] = set->end[0];
			v[1] = set->start[1];
			v[2] = set->end[2];
			break;
		case 6:
			v[0] = set->start[0];
			v[1] = set->end[1];
			v[2] = set->end[2];
			break;
		case 7:
			v[0] = set->end[0];
			v[1] = set->end[1];
			v[2] = set->end[2];
			break;
	}

/* subtract 1/2 */
	v[0] = v[0] - (set->d[0]/2);
	v[1] = v[1] - (set->d[1]/2);
	v[2] = v[2] - (set->d[2]/2);

/* done */
	return;
}

void vl_calc_even_rects(vset *set,long int n,long int *lines)
{
	double		mat[4][4],nmat[4][4];
	double		acc,per;
	double		norm[4],normin[4];
	double		vin[4][4],v[4][4];
	long int	i,j,k;
	long int	*sline;
	long int	facenorm[6][3] = { 	{1,0,0},{-1,0,0},
						{0,1,0},{0,-1,0},
						{0,0,1},{0,0,-1} };

/* setup defaults in case this does not work */
	j = set->imagey/n;
	lines[0] = j;
	for(i=1;i<n;i++) {
		lines[i] = lines[i-1] + j;
	}
	lines[n-1] = set->imagey;
	if (n == 1) return;  /* trival case */

/* allocate the accumunlators */
	sline = malloc(set->imagey*sizeof(long int));
	if (sline == 0) return;
	for(i=0;i<set->imagey;i++) sline[i] = 0;

/* get the tranformation matrix */
        vl_vset_to_4x4(set,mat);

/* save the transform matrix */
        for(i=0;i<3;i++) {
                for(j=0;j<3;j++) {
                        nmat[i][j] = mat[i][j];
                }
/* preserving the rotations only! */
                nmat[i][3] = 0;
                nmat[3][i] = mat[3][i];
        }
        nmat[3][3] = 1.0;

/* for each face */
	for(i=0;i<6;i++) {

/* get the verts:vin */
		for(j=0;j<4;j++) {
			get_vert(i,j,set,vin[j]);
		}
/* and normals */
		for(j=0;j<3;j++) normin[j] = facenorm[i][j];
		normin[3] = 1;

/* transform the normals */
                vl_matmult4x4(normin,norm,nmat);

/* backface cull: Norm dot Z > 0.0 then visible */
		if (norm[2] > 0) {
#ifdef DEBUG
			printf("Rendering plane %ld\n",i);
			printf("Norm:%lf %lf %lf\n",norm[0],norm[1],norm[2]);
#endif
/* transform verts */
                	vl_matmult4x4(vin[0],v[0],mat);
                	vl_matmult4x4(vin[1],v[1],mat);
                	vl_matmult4x4(vin[2],v[2],mat);
                	vl_matmult4x4(vin[3],v[3],mat);
/* shift for screen display */
			for(j=0;j<4;j++) {
				v[j][0] = v[j][0] + (set->imagex/2);
				v[j][1] = v[j][1] + (set->imagey/2);
			}
/* scan them into the line accumulators */
			scan_tri(v[0],v[1],v[2],sline,set);
			scan_tri(v[0],v[2],v[3],sline,set);
		}
	} /* next face */

/* create the lines array */
/* sum the number of pixels */
	j = 0;
	for(i=0;i<set->imagey;i++) {
		j += sline[i];
#ifdef DEBUG
		printf("%ld : %ld %ld\n",i,sline[i],j);
#endif
	}

/* add lines until the percentage exceeds the proper percent */
	k = 0;
	acc = 0;
/* note that lines[n-1] = set->imagey always */
	for(i=0;i<(n-1);i++) {
		per = (double)(i+1)/(double)(n);
		while((acc/(double)(j)) < per) acc += sline[k++];
		lines[i] = k;
	}
/* cleanup */
	free(sline);
/* done */
	return;
}
